import telebot
from telebot import types
from tinydb import TinyDB, Query
import requests
from datetime import datetime, timedelta
import uuid
import threading
import time

from config import (
    TOKEN, ADMIN_ID, CRYPTOBOT_TOKEN, CRYPTOBOT_API_URL, DB_CHANNEL_ID,
    TON_WALLET, TON_CHECK_TIMEOUT, TON_API_URL
)

bot = telebot.TeleBot(TOKEN)
db = TinyDB('database.json')
users = db.table('users')
products = db.table('products')
stats = db.table('stats')
categories = db.table('categories')
ton_payments = db.table('ton_payments')

# ---------- TON helpers ----------
def get_ton_transactions():
    url = TON_API_URL.format(TON_WALLET)
    try:
        r = requests.get(url, timeout=10)
        if r.status_code == 200:
            return r.json().get("transactions", [])
    except Exception as e:
        print("TON API err:", e)
    return []

def find_payment_by_comment(comment, amount):
    for tx in get_ton_transactions():
        try:
            msg = tx.get("in_msg", {})
            if msg.get("message") == comment:
                value = int(msg.get("value", 0)) / 1e9   # nanoton ‚Üí ton
                if value >= amount * 0.999:
                    return value
        except Exception:
            continue
    return None

def ton_payment_timer(user_id, comment, amount, chat_id, msg_id):
    start = time.time()
    while time.time() - start < TON_CHECK_TIMEOUT:
        if find_payment_by_comment(comment, amount):
            user = users.get(Query().user_id == user_id)
            users.update({
                'balance': user['balance'] + amount,
                'total_deposited': user['total_deposited'] + amount
            }, Query().user_id == user_id)
            stats.insert({'type': 'payment', 'amount': amount,
                          'timestamp': datetime.now().strftime('%Y-%m-%d')})
            bot.edit_message_text("‚úÖ TON –ø–ª–∞—Ç—ë–∂ –Ω–∞–π–¥–µ–Ω! –ë–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–µ–Ω.", chat_id, msg_id)
            return
        time.sleep(30)
    bot.edit_message_text("‚ùå –ü–ª–∞—Ç—ë–∂ –Ω–µ –ø–æ—Å—Ç—É–ø–∏–ª. –ó–∞—è–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.", chat_id, msg_id)

def ton_get_amount(message):
    try:
        amount = float(message.text)
        if amount < 0.1:
            raise ValueError("–ú–∏–Ω–∏–º—É–º 0.1 TON")
        comment = str(uuid.uuid4())[:8]
        user_id = message.from_user.id
        ton_payments.insert({
            'user_id': user_id,
            'amount': amount,
            'comment': comment,
            'status': 'pending',
            'timestamp': datetime.now().strftime('%Y-%m-%d %H:%M:%S')
        })
        text = (
            f"‚ûï –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ TON ‚ûï\n\n"
            f"üí∞ –°—É–º–º–∞: <b>{amount}</b> TON\n"
            f"üì® –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: <code>{comment}</code>\n"
            f"üíé –ö–æ—à–µ–ª—ë–∫: <code>{TON_WALLET}</code>\n\n"
            f"–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–æ—á–Ω—É—é —Å—É–º–º—É –Ω–∞ –∫–æ—à–µ–ª—ë–∫ —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–º.\n"
            f"‚ö†Ô∏è –ë–µ–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –ø–ª–∞—Ç—ë–∂ –Ω–µ –∑–∞—á—Ç—ë—Ç—Å—è.\n"
            f"‚è≥ –í—Ä–µ–º—è –Ω–∞ –æ–ø–ª–∞—Ç—É: 30 –º–∏–Ω—É—Ç"
        )
        sent = bot.send_message(message.chat.id, text, parse_mode='HTML')
        threading.Thread(target=ton_payment_timer,
                         args=(user_id, comment, amount, message.chat.id, sent.message_id),
                         daemon=True).start()
    except ValueError as e:
        bot.send_message(message.chat.id, str(e))

# ---------- —Å—Ç–∞—Ä—ã–π –∫–æ–¥ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π ----------
@bot.message_handler(commands=['start'])
def start(message):
    user_id = message.from_user.id
    if not users.get(Query().user_id == user_id):
        users.insert({
            'user_id': user_id,
            'balance': 0,
            'purchases': 0,
            'total_spent': 0,
            'total_deposited': 0,
            'join_date': datetime.now().strftime('%Y-%m-%d')
        })
        stats.insert({'type': 'new_user', 'timestamp': datetime.now().strftime('%Y-%m-%d')})
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.row(types.KeyboardButton("üè™ –ö—É–ø–∏—Ç—å"), types.KeyboardButton("üìã –¢–æ–≤–∞—Ä—ã"))
    markup.row(types.KeyboardButton("üë§ –ü—Ä–æ—Ñ–∏–ª—å"), types.KeyboardButton("üí≥ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å"))
    bot.send_message(message.chat.id, "<b>–ü—Ä–∏–≤–µ—Ç! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à –º–∞–≥–∞–∑–∏–Ω!</b>", reply_markup=markup, parse_mode='HTML')

@bot.message_handler(commands=['admin'])
def admin_panel(message):
    user_id = message.from_user.id
    if user_id != ADMIN_ID:
        bot.send_message(message.chat.id, "–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏")
        return
    markup = types.InlineKeyboardMarkup()
    markup.add(
        types.InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä", callback_data="admin_add"),
        types.InlineKeyboardButton("–£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä", callback_data="admin_delete")
    )
    markup.add(
        types.InlineKeyboardButton("–°–æ–∑–¥–∞—Ç—å —Ä–∞–∑–¥–µ–ª", callback_data="admin_create_category"),
        types.InlineKeyboardButton("–£–¥–∞–ª–∏—Ç—å —Ä–∞–∑–¥–µ–ª", callback_data="admin_delete_category")
    )
    markup.add(types.InlineKeyboardButton("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_stats"))
    bot.send_message(message.chat.id, "–ê–¥–º–∏–Ω –º–µ–Ω—é", reply_markup=markup)

@bot.message_handler(content_types=['text'])
def handle_text(message):
    user_id = message.from_user.id
    chat_id = message.chat.id
    if message.text == "üë§ –ü—Ä–æ—Ñ–∏–ª—å":
        user = users.get(Query().user_id == user_id)
        if user:
            text = (
                "–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:\n"
                f" –í–∞—à ID: <code>{user_id}</code>\n\n"
                "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:\n"
                f"‚îú –°—É–º–º–∞ –ø–æ–∫—É–ø–æ–∫: <code>{user['total_spent']}$</code>\n"
                f"‚îî –°—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–π: <code>{user['total_deposited']}$</code>\n\n"
                f"üè¶ –í–∞—à –±–∞–ª–∞–Ω—Å: <code>{user['balance']}$</code>"
            )
            bot.send_message(chat_id, text, parse_mode='HTML')
        else:
            bot.send_message(chat_id, "–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ —Å –ø–æ–º–æ—â—å—é /start")
    elif message.text == "üí≥ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å":
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("ü§ñ USDT (CryptoBot)", callback_data="pay_usdt"))
        markup.add(types.InlineKeyboardButton("üíé TON (–Ω–∞ –∫–æ—à–µ–ª—ë–∫)", callback_data="pay_ton"))
        bot.send_message(chat_id, "‚ûñ –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ ‚ûñ\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–±:", reply_markup=markup)
    elif message.text == "üè™ –ö—É–ø–∏—Ç—å":
        markup = types.InlineKeyboardMarkup()
        all_categories = categories.all()
        for i in range(0, len(all_categories), 2):
            row = []
            row.append(types.InlineKeyboardButton(all_categories[i]['name'], callback_data=f"category_{all_categories[i]['id']}"))
            if i + 1 < len(all_categories):
                row.append(types.InlineKeyboardButton(all_categories[i+1]['name'], callback_data=f"category_{all_categories[i+1]['id']}"))
            markup.add(*row)
        bot.send_message(chat_id, "–ö–∞—Ç–∞–ª–æ–≥", reply_markup=markup)
    elif message.text == "üìã –¢–æ–≤–∞—Ä—ã":
        show_products_list(chat_id, 1)

def process_amount(message):
    try:
        amount = float(message.text)
        if not (1 <= amount <= 1500):
            raise ValueError("–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç 1$ –¥–æ 1500$")
        markup = types.InlineKeyboardMarkup()
        invoice = create_cryptobot_invoice(amount, message.from_user.id)
        markup.add(types.InlineKeyboardButton("üåç –ü–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ", url=invoice['pay_url']))
        markup.add(types.InlineKeyboardButton("üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É", callback_data=f"check_{invoice['invoice_id']}"))
        bot.send_message(message.chat.id, f"‚ûñ –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ ‚ûñ\n\nüí∞ –°—É–º–º–∞: <code>{amount}$</code>", reply_markup=markup, parse_mode='HTML')
    except ValueError as e:
        bot.send_message(message.chat.id, str(e))

@bot.callback_query_handler(func=lambda call: True)
def callback_handler(call):
    chat_id = call.message.chat.id
    message_id = call.message.message_id
    if call.data == "pay_ton":
        bot.delete_message(chat_id, message_id)
        msg = bot.send_message(chat_id, "‚ûñ –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ TON ‚ûñ\n\n–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É (–º–∏–Ω. 0.1 TON):")
        bot.register_next_step_handler(msg, ton_get_amount)
        return
    if call.data == "pay_usdt":
        bot.delete_message(chat_id, message_id)
        msg = bot.send_message(chat_id, "‚ûñ –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ ‚ûñ\n\n–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è, –æ—Ç 1$ –¥–æ 1500$:")
        bot.register_next_step_handler(msg, process_amount)
        return
    if call.data.startswith("check_"):
        invoice_id = call.data.split("_")[1]
        status = check_payment(invoice_id)
        if status:
            amount = float(status['amount'])
            user = users.get(Query().user_id == call.from_user.id)
            users.update({
                'balance': user['balance'] + amount,
                'total_deposited': user['total_deposited'] + amount
            }, Query().user_id == call.from_user.id)
            stats.insert({'type': 'payment', 'amount': amount, 'timestamp': datetime.now().strftime('%Y-%m-%d')})
            bot.edit_message_text("‚úÖ –û–ø–ª–∞—Ç–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!", chat_id, message_id)
        else:
            bot.answer_callback_query(call.id, "–ü–ª–∞—Ç–µ–∂ –µ—â–µ –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω")
        return
    # ---------- –æ—Å—Ç–∞–ª—å–Ω—ã–µ callback–∏ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π ----------
    if call.data.startswith("category_"):
        category_id = int(call.data.split("_")[1])
        category = categories.get(Query().id == category_id)
        if category:
            bot.delete_message(chat_id, message_id)
            markup = types.InlineKeyboardMarkup()
            items = products.search(Query().category_id == category_id)
            for i in range(0, len(items), 2):
                row = []
                row.append(types.InlineKeyboardButton(items[i]['name'], callback_data=f"item_{items[i]['id']}"))
                if i + 1 < len(items):
                    row.append(types.InlineKeyboardButton(items[i+1]['name'], callback_data=f"item_{items[i+1]['id']}"))
                markup.add(*row)
            markup.add(types.InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="back_to_catalog"))
            bot.send_message(chat_id, f"–ö–∞—Ç–∞–ª–æ–≥: {category['name']}", reply_markup=markup)
        return
    if call.data.startswith("item_"):
        item_id = int(call.data.split("_")[1])
        item = products.get(Query().id == item_id)
        if item:
            bot.delete_message(chat_id, message_id)
            text = (
                "‚ûñ –ü–æ–∫—É–ø–∫–∞ ‚ûñ\n\n"
                f"üì¶ –¢–æ–≤–∞—Ä: {item['name']}\n"
                f"üí∞ –¶–µ–Ω–∞: {item['price']}$\n\n"
                "–û–ø–∏—Å–∞–Ω–∏–µ:\n"
                f"{item['description']}"
            )
            markup = types.InlineKeyboardMarkup()
            markup.add(
                types.InlineKeyboardButton("üõç –ö—É–ø–∏—Ç—å", callback_data=f"buy_{item_id}"),
                types.InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data=f"category_{item['category_id']}"))
            bot.send_message(chat_id, text, reply_markup=markup, parse_mode='HTML')
        return
    if call.data == "back_to_catalog":
        bot.delete_message(chat_id, message_id)
        markup = types.InlineKeyboardMarkup()
        all_categories = categories.all()
        for i in range(0, len(all_categories), 2):
            row = []
            row.append(types.InlineKeyboardButton(all_categories[i]['name'], callback_data=f"category_{all_categories[i]['id']}"))
            if i + 1 < len(all_categories):
                row.append(types.InlineKeyboardButton(all_categories[i+1]['name'], callback_data=f"category_{all_categories[i+1]['id']}"))
            markup.add(*row)
        bot.send_message(chat_id, "–ö–∞—Ç–∞–ª–æ–≥", reply_markup=markup)
        return
    if call.data.startswith("buy_"):
        item_id = int(call.data.split("_")[1])
        item = products.get(Query().id == item_id)
        if item:
            bot.delete_message(chat_id, message_id)
            markup = types.InlineKeyboardMarkup()
            markup.add(
                types.InlineKeyboardButton("–î–∞", callback_data=f"confirm_{item_id}"),
                types.InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data=f"item_{item_id}")
            )
            bot.send_message(chat_id, "<b>–í—ã —Ç–æ—á–Ω–æ —Ö–æ—Ç–∏—Ç–µ –∫—É–ø–∏—Ç—å —ç—Ç–æ—Ç —Ç–æ–≤–∞—Ä?</b>", reply_markup=markup, parse_mode='HTML')
        return
    if call.data.startswith("confirm_"):
        item_id = int(call.data.split("_")[1])
        item = products.get(Query().id == item_id)
        user_id = call.from_user.id
        user = users.get(Query().user_id == user_id)
        if item and user:
            if user['balance'] >= item['price']:
                bot.delete_message(chat_id, message_id)
                users.update({
                    'balance': user['balance'] - item['price'],
                    'purchases': user['purchases'] + 1,
                    'total_spent': user['total_spent'] + item['price']
                }, Query().user_id == user_id)
                bot.send_message(chat_id, "‚ö°Ô∏è")
                if 'file_id' in item:
                    bot.send_document(chat_id, item['file_id'], caption=f"–í–∞—à —Ç–æ–≤–∞—Ä: {item['name']}")
            else:
                bot.edit_message_text("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ!", chat_id, message_id)
        return
    if call.data == "admin_stats":
        stats_text = get_stats()
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="admin_back"))
        bot.edit_message_text(stats_text, chat_id, message_id, reply_markup=markup, parse_mode='HTML')
        return
    if call.data == "admin_back":
        markup = types.InlineKeyboardMarkup()
        markup.add(
            types.InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä", callback_data="admin_add"),
            types.InlineKeyboardButton("–£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä", callback_data="admin_delete")
        )
        markup.add(
            types.InlineKeyboardButton("–°–æ–∑–¥–∞—Ç—å —Ä–∞–∑–¥–µ–ª", callback_data="admin_create_category"),
            types.InlineKeyboardButton("–£–¥–∞–ª–∏—Ç—å —Ä–∞–∑–¥–µ–ª", callback_data="admin_delete_category")
        )
        markup.add(types.InlineKeyboardButton("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_stats"))
        bot.edit_message_text("–ê–¥–º–∏–Ω –º–µ–Ω—é", chat_id, message_id, reply_markup=markup)
        return
    if call.data == "admin_add":
        markup = types.InlineKeyboardMarkup()
        all_categories = categories.all()
        for i in range(0, len(all_categories), 2):
            row = []
            row.append(types.InlineKeyboardButton(all_categories[i]['name'], callback_data=f"admin_select_category_{all_categories[i]['id']}"))
            if i + 1 < len(all_categories):
                row.append(types.InlineKeyboardButton(all_categories[i+1]['name'], callback_data=f"admin_select_category_{all_categories[i+1]['id']}"))
            markup.add(*row)
        bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞", reply_markup=markup)
        return
    if call.data == "admin_create_category":
        bot.delete_message(chat_id, message_id)
        msg = bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–∞–∑–¥–µ–ª–∞")
        bot.register_next_step_handler(msg, create_category)
        return
    if call.data == "admin_delete_category":
        show_categories_to_delete(chat_id)
        return
    if call.data == "admin_delete":
        show_products_to_delete(chat_id)
        return
    if call.data.startswith("admin_select_category_"):
        category_id = int(call.data.split("_")[3])
        bot.delete_message(chat_id, message_id)
        msg = bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞")
        bot.register_next_step_handler(msg, lambda m: add_product_name(m, category_id))
        return
    if call.data.startswith("products_page_"):
        page = int(call.data.split("_")[2])
        bot.edit_message_text(chat_id=chat_id, message_id=message_id, text=update_products_list(chat_id, page), reply_markup=update_pagination(page), parse_mode='HTML')

# ---------- –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π ----------
def create_category(message):
    if not message.text:
        bot.send_message(message.chat.id, "–ù–∞–∑–≤–∞–Ω–∏–µ —Ä–∞–∑–¥–µ–ª–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º!")
        return
    name = message.text
    category_id = len(categories) + 1
    categories.insert({'id': category_id, 'name': name})
    bot.send_message(message.chat.id, "–†–∞–∑–¥–µ–ª —Å–æ–∑–¥–∞–Ω")

def show_categories_to_delete(chat_id):
    all_categories = categories.all()
    if not all_categories:
        bot.send_message(chat_id, "–†–∞–∑–¥–µ–ª–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç")
        return
    text = "<b>–°–ø–∏—Å–æ–∫ —Ä–∞–∑–¥–µ–ª–æ–≤</b>\n\n"
    for i, category in enumerate(all_categories, 1):
        text += f"{i}. <b>{category['name']}</b>\n"
    text += "\n<b>–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ä–∞–∑–¥–µ–ª–∞, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å</b>"
    msg = bot.send_message(chat_id, text, parse_mode='HTML')
    bot.register_next_step_handler(msg, delete_category)

def delete_category(message):
    try:
        num = int(message.text) - 1
        all_categories = categories.all()
        if 0 <= num < len(all_categories):
            category_id = all_categories[num]['id']
            products.remove(Query().category_id == category_id)
            categories.remove(doc_ids=[all_categories[num].doc_id])
            bot.send_message(message.chat.id, "–†–∞–∑–¥–µ–ª —É–¥–∞–ª–µ–Ω!")
        else:
            bot.send_message(message.chat.id, "–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä —Ä–∞–∑–¥–µ–ª–∞!")
    except ValueError:
        bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä!")

def create_cryptobot_invoice(amount, user_id):
    headers = {
        'Crypto-Pay-API-Token': CRYPTOBOT_TOKEN,
        'Content-Type': 'application/json'
    }
    payload = {
        'amount': str(amount),
        'asset': 'USDT',
        'description': f'–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}'
    }
    try:
        response = requests.post(f'{CRYPTOBOT_API_URL}createInvoice', headers=headers, json=payload)
        response.raise_for_status()
        data = response.json()
        if 'ok' in data and data['ok'] and 'result' in data:
            return data['result']
        else:
            error_msg = data.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')
            raise Exception(f"–û—à–∏–±–∫–∞ API Crypto Bot: {error_msg}")
    except requests.exceptions.RequestException as e:
        raise Exception(f"–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å Crypto Bot: {str(e)}")
    except ValueError as e:
        raise Exception(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–≤–µ—Ç–∞ –æ—Ç Crypto Bot: {str(e)}")

def check_payment(invoice_id):
    headers = {
        'Crypto-Pay-API-Token': CRYPTOBOT_TOKEN,
        'Content-Type': 'application/json'
    }
    try:
        response = requests.get(f'{CRYPTOBOT_API_URL}getInvoices?invoice_ids={invoice_id}', headers=headers)
        response.raise_for_status()
        data = response.json()
        if data['ok'] and 'result' in data and data['result']['items']:
            return data['result']['items'][0] if data['result']['items'][0]['status'] == 'paid' else False
        return False
    except Exception as e:
        return False

def get_stats():
    Stat = Query()
    today = datetime.now().strftime('%Y-%m-%d')
    week_ago = (datetime.now() - timedelta(days=7)).strftime('%Y-%m-%d')
    users_day = len(stats.search((Stat.type == 'new_user') & (Stat.timestamp >= today)))
    users_week = len(stats.search((Stat.type == 'new_user') & (Stat.timestamp >= week_ago)))
    users_total = len(stats.search(Stat.type == 'new_user'))
    payments_day = len(stats.search((Stat.type == 'payment') & (Stat.timestamp >= today)))
    payments_week = len(stats.search((Stat.type == 'payment') & (Stat.timestamp >= week_ago)))
    payments_total = len(stats.search(Stat.type == 'payment'))
    return (
        "<b>üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n\n"
        "<b>üë§ –Æ–∑–µ—Ä—ã:</b>\n"
        f"–ó–∞ –¥–µ–Ω—å: <code>{users_day}</code>\n"
        f"–ó–∞ –Ω–µ–¥–µ–ª—é: <code>{users_week}</code>\n"
        f"–ó–∞ –í—Å—ë –≤—Ä–µ–º—è: <code>{users_total}</code>\n\n"
        "<b>üí∞–ü–æ–ø–æ–ª–Ω–µ–Ω–∏—è:</b>\n"
        f"–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–π –∑–∞ –î–µ–Ω—å: <code>{payments_day}</code>\n"
        f"–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–π –∑–∞ –ù–µ–¥–µ–ª—é: <code>{payments_week}</code>\n"
        f"–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–π –∑–∞ –í—Å–µ –≤—Ä–µ–º—è: <code>{payments_total}</code>"
    )

def add_product_name(message, category_id):
    if not message.text:
        bot.send_message(message.chat.id, "–ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º!")
        return
    name = message.text
    bot.delete_message(message.chat.id, message.message_id - 1)
    msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞")
    bot.register_next_step_handler(msg, lambda m: add_product_desc(m, name, category_id))

def add_product_desc(message, name, category_id):
    if not message.text:
        bot.send_message(message.chat.id, "–û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º!")
        return
    desc = message.text
    bot.delete_message(message.chat.id, message.message_id - 1)
    msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É —Ç–æ–≤–∞—Ä–∞")
    bot.register_next_step_handler(msg, lambda m: add_product_price(m, name, desc, category_id))

def add_product_price(message, name, desc, category_id):
    try:
        price = float(message.text)
        if price <= 0:
            raise ValueError("–¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π")
        bot.delete_message(message.chat.id, message.message_id - 1)
        msg = bot.send_message(message.chat.id, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å—Å—è –ø–æ—Å–ª–µ –ø–æ–∫—É–ø–∫–∏")
        bot.register_next_step_handler(msg, lambda m: add_product_file(m, name, desc, price, category_id))
    except ValueError:
        bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—É—é —Ü–µ–Ω—É!")

def add_product_file(message, name, desc, price, category_id):
    if message.content_type == 'document':
        file_msg = bot.send_document(DB_CHANNEL_ID, message.document.file_id)
        file_id = file_msg.document.file_id
        bot.delete_message(message.chat.id, message.message_id - 1)
        product_id = len(products) + 1
        products.insert({
            'id': product_id,
            'name': name,
            'description': desc,
            'price': price,
            'file_id': file_id,
            'category_id': category_id
        })
        bot.send_message(message.chat.id, "–¢–æ–≤–∞—Ä —Å–æ–∑–¥–∞–Ω")
    else:
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç!")

def update_products_list(chat_id, page):
    items = products.all()
    total_items = len(items)
    items_per_page = 32
    total_pages = (total_items + items_per_page - 1) // items_per_page
    if total_pages == 0:
        return "–¢–æ–≤–∞—Ä–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç"
    if page < 1:
        page = 1
    if page > total_pages:
        page = total_pages
    start_idx = (page - 1) * items_per_page
    end_idx = min(start_idx + items_per_page, total_items)
    text = ""
    for item in items[start_idx:end_idx]:
        text += f"<b>{item['name']}</b> | <code>{item['price']}$</code>\n"
    return text

def update_pagination(page):
    items = products.all()
    total_items = len(items)
    items_per_page = 32
    total_pages = (total_items + items_per_page - 1) // items_per_page
    if total_pages <= 1:
        return None
    markup = types.InlineKeyboardMarkup()
    row = []
    if page == 1 and total_pages > 1:
        row.append(types.InlineKeyboardButton(f"{page}/{total_pages}", callback_data="noop"))
        row.append(types.InlineKeyboardButton("–í–ø–µ—Ä–µ–¥ ‚ñ∂Ô∏è", callback_data=f"products_page_{page+1}"))
    elif page == total_pages and total_pages > 1:
        row.append(types.InlineKeyboardButton("–ù–∞–∑–∞–¥ ‚óÄÔ∏è", callback_data=f"products_page_{page-1}"))
        row.append(types.InlineKeyboardButton(f"{page}/{total_pages}", callback_data="noop"))
    else:
        row.append(types.InlineKeyboardButton("–ù–∞–∑–∞–¥ ‚óÄÔ∏è", callback_data=f"products_page_{page-1}"))
        row.append(types.InlineKeyboardButton(f"{page}/{total_pages}", callback_data="noop"))
        row.append(types.InlineKeyboardButton("–í–ø–µ—Ä–µ–¥ ‚ñ∂Ô∏è", callback_data=f"products_page_{page+1}"))
    markup.add(*row)
    return markup

def show_products_list(chat_id, page):
    text = update_products_list(chat_id, page)
    markup = update_pagination(page)
    bot.send_message(chat_id, text, reply_markup=markup, parse_mode='HTML')

def show_products_to_delete(chat_id):
    items = products.all()
    if not items:
        bot.send_message(chat_id, "–¢–æ–≤–∞—Ä–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç")
        return
    text = "<b>–°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤</b>\n\n"
    for i, item in enumerate(items, 1):
        text += f"{i}. <b>{item['name']}</b> | <code>{item['price']}$</code>\n"
    text += "\n<b>–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–æ–≤–∞—Ä–∞ –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å</b>"
    msg = bot.send_message(chat_id, text, parse_mode='HTML')
    bot.register_next_step_handler(msg, delete_product)

def delete_product(message):
    try:
        num = int(message.text) - 1
        items = products.all()
        if 0 <= num < len(items):
            products.remove(doc_ids=[items[num].doc_id])
            bot.send_message(message.chat.id, "–¢–æ–≤–∞—Ä —É–¥–∞–ª–µ–Ω!")
        else:
            bot.send_message(message.chat.id, "–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–æ–≤–∞—Ä–∞!")
    except ValueError:
        bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä!")

if __name__ == "__main__":
    try:
        bot.polling(none_stop=True)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {str(e)}")
